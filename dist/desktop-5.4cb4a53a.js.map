{"mappings":"AAAA,SAAS,YAAY,aAAa,EAAE,YAAY;IAC5C,IAAI,WAAW,aAAa,MAAM,EAAE,kBAAkB;IACtD,IAAI,YAAY,IAAI,MAAM,UAAU,IAAI,CAAC,IAAI,gCAAgC;IAC7E,IAAI,OAAO;IACX,IAAI,SAAS,IAAI,6BAA6B;IAE9C,UAAU;IACV,UAAU,oCAAoC,KAAK,SAAS,CAAC,aAAa;IAE1E,2BAA2B;IAC3B,SAAS,UAAU,SAAS;QACxB,SAAS,CAAC,UAAU,GAAG,GAAG,yBAAyB;QACnD,QAAQ,iBAAiB;QACzB,UAAU,+BAAgC,CAAA,YAAY,CAAA,IAAK,OAAO,OAAO;QACzE,UAAU,aAAc,CAAA,YAAY,CAAA,IAAK;IAC7C;IAEA,6BAA6B;IAC7B,SAAS,WAAW,SAAS;QACzB,UAAU,uBAAwB,CAAA,YAAY,CAAA,IAAK;QAEnD,IAAI,cAAc,eACd,UAAU,gCAAiC,CAAA,YAAY,CAAA,IAAK;aACzD;YACH,QAAQ,4BAA4B;YACpC,UAAU,6BAA8B,CAAA,YAAY,CAAA,IAAK,OAAO,OAAO;QAC3E;IACJ;IAEA,qCAAqC;IACrC,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,IAC1B,IAAI,YAAY,CAAC,EAAE,KAAK,GACpB,UAAU;IAIlB,oCAAoC;IACpC,UAAU;IACV,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,IAC1B,UAAU,aAAc,CAAA,IAAI,CAAA,IAAK,OAAQ,CAAA,SAAS,CAAC,EAAE,KAAK,IAAI,UAAU,OAAM,IAAK;IAGvF,UAAU,oBAAoB,KAAK,SAAS,CAAC,aAAa;IAC1D,UAAU,iCAAiC,OAAO;IAElD,SAAS,cAAc,CAAC,UAAU,SAAS,GAAG,QAAQ,0CAA0C;AACpG","sources":["Downloads/ FINAL/vacuum_cleaner.js"],"sourcesContent":["function vacuumWorld(locationInput, statusInputs) {\n    let numRooms = statusInputs.length; // Number of rooms\n    let goalState = new Array(numRooms).fill(0); // Initialize all rooms as clean\n    let cost = 0;\n    let output = \"\"; // String to store the output\n\n    output += \"<h2>Simulation Details:</h2>\";\n    output += \"<p>Initial Location Condition: \" + JSON.stringify(goalState) + \"</p>\";\n\n    // Function to clean a room\n    function cleanRoom(roomIndex) {\n        goalState[roomIndex] = 0; // Mark the room as clean\n        cost++; // Increment cost\n        output += \"<p>Cost for CLEANING Room \" + (roomIndex + 1) + \": \" + cost + \"</p>\";\n        output += \"<p>Room \" + (roomIndex + 1) + \" has been Cleaned.</p>\";\n    }\n\n    // Function to move to a room\n    function moveToRoom(roomIndex) {\n        output += \"<p>Moving to Room \" + (roomIndex + 1) + \". \";\n\n        if (roomIndex === locationInput) {\n            output += \"No action. Already in Room \" + (roomIndex + 1) + \".\";\n        } else {\n            cost++; // Increment cost for moving\n            output += \"COST for moving to Room \" + (roomIndex + 1) + \": \" + cost + \"</p>\";\n        }\n    }\n\n    // Clean all dirty rooms sequentially\n    for (let i = 0; i < numRooms; i++) {\n        if (statusInputs[i] === 1) {\n            cleanRoom(i);\n        }\n    }\n\n    // Add status of all rooms to output\n    output += \"<p>Current Room Status:</p>\";\n    for (let i = 0; i < numRooms; i++) {\n        output += \"<p>Room \" + (i + 1) + \": \" + (goalState[i] === 1 ? \"Dirty\" : \"Clean\") + \"</p>\";\n    }\n\n    output += \"<p>GOAL STATE: \" + JSON.stringify(goalState) + \"</p>\";\n    output += \"<p>Performance Measurement: \" + cost + \"</p>\";\n\n    document.getElementById(\"output\").innerHTML = output; // Display the output in the HTML document\n}\n"],"names":[],"version":3,"file":"desktop-5.4cb4a53a.js.map","sourceRoot":"/__parcel_source_root/"}